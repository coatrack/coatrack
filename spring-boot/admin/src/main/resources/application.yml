# application yml just for parameters to be set at build time
# all other config properties are to be received from cloud config server

mvn.pom.project.version: @@project.version@@

logging:
  level:
    root: INFO
    eu.coatrack: DEBUG

# Necessary in order to run offline     
ygg:
  mail:
    # Define if CoatRack should send verification emails to newly registered users
    verify-new-users-via-mail: true
    # Settings for the verification email to be sent to new users
    server:
      url: smtp-server-url
      port: 465
    sender:
      from: verification-email-sender@example.org
      user: email-sender-username
      password: email-sender-password
    # Base URL of CoatRack (basis to generate the verification link)
    verification.server.url: http://localhost:8080

  admin:
    payable.enable: false
    database.insertSampleDataOnStartup: true
    server:
      url: http://localhost:8080
    servicecovers:
      path: /tmp
      url: http://localhost/coatrack-servicecovers/
    payment.commision:
      variable: 50
      fix: 1
      bookKeeping.contact: your-email-address@example.org
    call-request-fee: 0

    gitService:
      # URL and credentials for the Git repository where CoatRack stores gateway config files
      url: http://localhost
      user: user
      password: password

    # URL of the CoatRack web application's API that will be called by CoatRack gateways
    api-base-url-for-gateway: http://localhost:8080/api/

    gettingStarted:
      consumer:
        testService:
          # Provider and identifier to define the test service to be used in the getting started tutorial
          provider.username: exampleCompanyInc
          uriIdentifier: humidity-by-location
  proxy:
    executable-jar:
      generated.path: /tmp
      # URL of the "template jar" that CoatRack uses as basis to generate proxies (without the trailing version number and .jar filename extension)
      template.url: https://www.kyoe.es/proxies/coatrack-proxy-
      path: path
      filename-custom:
        prefix: coatrack-gateway-
        suffix: .jar
    generate-bootstrap-properties:
      spring.application.name.prefix: ygg-proxy-
      spring.cloud.config.uri: http://localhost:8998
    server.port.defaultValue: 8088

# Necessary to define the threshold times to display different
# status (warning and critical) on the Gateway Health Monitor
ygg.gateway-health-monitor:
  warning.threshold.minutes: 5
  critical.threshold.minutes: 60

spring:
  data:
    rest:
      base-path: /api

spring.application.name: ygg-admin

# TODO Still require for the service generated proxies, maybe we can consider the idea to rename the property in order to not confuse
spring.cloud.config:
  username: admin
  password: password
  uri: http://localhost:8998

security:
  oauth2:
    client:
      # the following oauth client configuration is just for development testing purposes, do NOT use in a production setting
      clientId: e188a243cc57ef90f2b5
      clientSecret: a5630e2f873890bdc8366aac0155e8113ece0997
      accessTokenUri: https://github.com/login/oauth/access_token
      userAuthorizationUri: https://github.com/login/oauth/authorize
      tokenName: oauth_token
      # send client id/secret to Github as ...
      #clientAuthenticationScheme: form # form fields
      clientAuthenticationScheme: header # headers
      # send oauth token to Github as ...
      authenticationScheme: header # header
      #authenticationScheme: query # query parameter
      scope:
        - user:email
        - read:user
    resource:
      userInfoUri: https://api.github.com/user

management.security.enabled: false
