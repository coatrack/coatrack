#
# This is a template for a private local development config file for the CoatRack web application (ygg-admin).
# Personal/private config files override the default values that are defined in "application.yml".
#
# Steps to create your own customized config file:
#  1. Create a copy of this file in the same directory
#  2. Rename the copy as "application-private-[your-profile-name].yml"
#     (follow this naming scheme, so that the file will be ignored by Git and not added to the public repository)
#  3. Adjust the placeholder values in this file to be in line with your local development setup
#  4. Run the CoatRack admin application using the Spring profile "private-[your-profile-name]"
#     (e.g. using your IDE or via the command "sh run-admin-web-application private-[your-profile-name]")
#
# This template includes the most common settings that are usually customized, but you can also add more settings
# if you want to override the default values (see "application.yml" for all configuration options).
#
ygg:
  admin:
    gitService:
      # URL and credentials for the Git repository to be used by CoatRack to store gateway config files
      url: https://git-repository-url
      user: git-username
      password: git-password
    gettingStarted:
      consumer:
        testService:
          # Provider username and identifier of the service to be used in the getting started tutorial for service users
          provider.username: exampleCompanyInc
          uriIdentifier: humidity-by-location
    database:
      # Define if you want to use development test data to be generated by CoatRack on startup
      insertSampleDataOnStartup: true
      # The generated service test data can be linked to your own Github username (either as service api provider or
      # as service api consumer). PLEASE NOTE: the following two usernames can NOT be identical (that would lead to
      # errors), so you should use your own Github username for only one of those parameters.
      sample-data.username:
        api-provider: api-provider-github-username
        api-consumer: api-consumer-github-username
  proxy:
    executable-jar:
      # URL of the "template jar" that CoatRack uses as basis to generate proxies.
      # During development testing, this should usually point to your locally built ygg-proxy.jar
      # (but without the trailing version number and .jar filename extension, those will be added automatically).
      template.url: file:///path/to/coatrack-parent/spring-boot/proxy/target/coatrack-proxy-
    generate-bootstrap-properties:
      # URL of the config server for gateways to get their config at start-up/runtime
      spring.cloud.config.uri: http://localhost:8998

# URL to be used by admin to inform config server about credentials generated for proxies
spring.cloud.config.uri: http://localhost:8998
